# -*- coding: utf-8 -*-
"""project2_task2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YenO-6huB7yNZQVZwQglcvsN133F46yR
"""

# 1. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# 2. File Upload (Jupyter/Colab compatible)
from IPython.display import display
import io

try:
    from google.colab import files
    uploaded = files.upload()
    df = pd.read_csv(io.BytesIO(list(uploaded.values())[0]))
except ImportError:
    print("Not running in Colab. Please use Jupyter's file dialog or manually load your CSV.")

# 3. Basic EDA
print("First 5 rows:\n", df.head())
print("\nDataset Info:\n", df.info())
print("\nSummary Statistics:\n", df.describe())
print("\nNull Values:\n", df.isnull().sum())

# 4. Data Visualization

# Correlation Heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.show()

# Quality Distribution
sns.countplot(x='quality', data=df, palette='viridis')
plt.title("Wine Quality Distribution")
plt.show()

# Boxplot of Alcohol vs Quality
sns.boxplot(x='quality', y='alcohol', data=df, palette='Set3')
plt.title("Alcohol Content by Quality")
plt.show()

# 5. Create Binary Classification Label
df['quality_label'] = df['quality'].apply(lambda q: 1 if q >= 7 else 0)  # 1: High Quality, 0: Low/Medium

# 6. Feature Selection & Scaling
X = df.drop(['quality', 'quality_label'], axis=1)
y = df['quality_label']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 7. Split Dataset
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# 8. Model Training and Evaluation
models = {
    "Random Forest": RandomForestClassifier(random_state=42),
    "SGD Classifier": SGDClassifier(random_state=42),
    "Support Vector Classifier": SVC(random_state=42)
}

for name, model in models.items():
    print(f"\n----- {name} -----")
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f"{name} - Confusion Matrix")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()

# 9. Feature Importance (Random Forest)
rf = models["Random Forest"]
importances = rf.feature_importances_
features = X.columns

feature_df = pd.DataFrame({'Feature': features, 'Importance': importances})
feature_df = feature_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_df, palette='crest')
plt.title("Feature Importance (Random Forest)")
plt.show()
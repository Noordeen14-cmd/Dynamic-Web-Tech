# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OF8_46MC3vyTqqc_YWvxV8TBb0MxIqwV
"""

# 1. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score

# 2. File Upload (Google Colab or Jupyter)
try:
    from google.colab import files
    import io
    uploaded = files.upload()
    df = pd.read_csv(io.BytesIO(list(uploaded.values())[0]))
except ImportError:
    import tkinter as tk
    from tkinter import filedialog
    root = tk.Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename()
    df = pd.read_csv(file_path)

# 3. Basic EDA
print("Shape:", df.shape)
print("Null Values:\n", df.isnull().sum())
print(df['Class'].value_counts())  # Check class imbalance

# 4. Data Visualization
sns.countplot(x='Class', data=df)
plt.title("Fraud vs Legit Transactions")
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df['Amount'], bins=50, kde=True)
plt.title("Transaction Amount Distribution")
plt.show()

# 5. Feature and Target Setup
X = df.drop(['Class'], axis=1)
y = df['Class']

# Standardize 'Amount' and 'Time' only
scaler = StandardScaler()
X[['Time', 'Amount']] = scaler.fit_transform(X[['Time', 'Amount']])

# 6. Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)

# 7. Model Definitions
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Decision Tree": DecisionTreeClassifier(),
    "Neural Network (MLP)": MLPClassifier(hidden_layer_sizes=(16, 8), max_iter=500)
}

# 8. Model Training and Evaluation
for name, model in models.items():
    print(f"\nüîç {name}")
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("ROC AUC:", roc_auc_score(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))

    # Confusion Matrix
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f"{name} - Confusion Matrix")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()

# 9. Class Imbalance Note
print("Legit to Fraud ratio:")
print(df['Class'].value_counts(normalize=True))